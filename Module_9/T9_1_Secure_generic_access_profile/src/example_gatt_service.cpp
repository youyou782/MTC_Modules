#include "example_gatt_service.h"

#include <cstdint>
#include <iostream>
#include <memory>
#include <stdint.h>

/**
 * @brief Characteristics UUIDs generated by https://www.uuidgenerator.net/
 *
 */
const char *example_service_characteristics_uuids[] = {"6a7a0839-a67d-4fb9-ac5d-65f2843d5250",
													   "8cc6f2b4-a06e-4905-bfb7-0eb93889bfe6",
													   "02f4685a-a39e-481d-b932-1129012be897"};
/**
 * @brief Service UUID generated by https://www.uuidgenerator.net/
 *
 */
const char *example_service_uuid = "10ffbbdf-15eb-4a3c-9a12-3391bc95a127";
/**
 * @brief The characteristics user descriptions
 *
 */
const char *example_service_characteristic_descriptions[] = {"LED2", "DummyConfig", "TickCount"};

void CExampleGattService::updateTickCount() {
	uint64_t tick_count = rtos::Kernel::Clock::now().time_since_epoch().count();
    // TODO:: Implement this functions
	// 1. Convert the value to uint32_t
    uint32_t a = static_cast<uint32_t>(tick_count);
	// 2. set the value of TickCount characteristic using static CExampleGattService::setCharacteristicValue
	
    //update value
    // std::cout << "updating tick value" << std::endl;
    setCharacteristicValue(*_characteristics[2], a);
    // std::cout << "tick updated" << std::endl;
}

CExampleGattService::CExampleGattService(EventQueue &event_queue, PinName led_pin)
	: _event_queue(event_queue), _led(led_pin), _led_value(1), _tick_count(0), _dummy_config(0) {
	// TODO:: Implement this functions

	// these indices also define the order of adding the characteristics
	_characteristic_led_index = 0;
	_characteristic_dummy_config_index = 1;
	_characteristic_tick_count_index = 2;

	// 1. add characteristics to this service
	//    i. Add LED characteristic to index 0.
	//       Assert that addCharacteristic function returns true
	//    ii. Add DummyConfig characteristic to index 1.
	//       Assert that addCharacteristic function returns true
	//    iii. Add TickCount characteristic to index 0.
	//       Assert that addCharacteristic function returns true
    assert(this->addCharacteristic(example_service_characteristics_uuids[0],
                            GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ |
                            GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_WRITE,
                            example_service_characteristic_descriptions[0],
                            &_led_value,
                            sizeof(_led_value)) && "add service 1 fail");

    assert(this->addCharacteristic(example_service_characteristics_uuids[1],
                            GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ |
                            GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_WRITE,
                            example_service_characteristic_descriptions[1],
                            (uint8_t*) &_dummy_config,
                            sizeof(_dummy_config)) && "add service 2 fail");

    assert(this->addCharacteristic(example_service_characteristics_uuids[2],
                            GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_READ |
                            GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_NOTIFY |
                            GattCharacteristic::BLE_GATT_CHAR_PROPERTIES_INDICATE,
                            example_service_characteristic_descriptions[2],
                            (uint8_t*) &_tick_count,
                            sizeof(_tick_count)) && "add service 3 fail");
	// 2. Turn off the LED
    _led = 1;
	// 3. create this service and assert the return value.
	assert(!(this->CGattService::createService(example_service_uuid)) && "service creation failed");
	std::cout << "ExampleGattService created" << std::endl;
}

CExampleGattService::~CExampleGattService() {}

void CExampleGattService::onDataWrittenHandler(GattCharacteristic *characteristic,
											   const uint8_t *data,
											   uint16_t size) {
	// TODO:: Implement this functions
	int characteristic_index = -1;
	// 1. find the index of the characteristic by iterating over _characteristics and
	//    using pointer comparison operators
    for( int i = 0 ; i < _characteristics.size(); i++){
        if(_characteristics[i] == characteristic){
            characteristic_index = i;
            break;
        }
    }
	
	// perform the specified operations if the found index has certain value
	if (characteristic_index == -1) {
		return;
	}

	if (characteristic_index == _characteristic_led_index) {
		size_t copy_size = fmin(size, sizeof(_led_value));
		if(copy_size > size){
            _led_value = 0;
        }else{
            _led_value = *data;
        }
		std::cout << "LED value: " << int(_led_value) << std::endl;
        //chang the state of led2
        if(*data % 2){
            _led = 0;
        }
        else{
            _led = 1;
        }
	}
	if (characteristic_index == _characteristic_dummy_config_index) {
		size_t copy_size = fmin(size, sizeof(_dummy_config));
		if(copy_size > size){
            _dummy_config = 0;
        }else{
            _dummy_config = *reinterpret_cast<const uint16_t *>(data);
        }

        //output the new value
		std::cout << "DummyConfig value: " << _dummy_config << std::endl;

	}
	if (characteristic_index == _characteristic_tick_count_index) {
		std::cout << "TickCount modified -- ERROR--" << std::endl;
		return;
	}
}

void CExampleGattService::registerService(ble::BLE &ble) {
    
	CGattService::registerService(ble);
	// TODO: implement this function
	std::cout << "Registering ExampleGattService-" << std::endl;
    // ble.gattServer().addService(*_service);
	// 1. Configure the EventQueue to update the tick count using CExampleGattServer::updateTickCount function
	//    every second
    _event_queue.call_every(1000ms, mbed::callback(this, &CExampleGattService::updateTickCount));
	
}
